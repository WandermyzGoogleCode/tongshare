#summary 用户验证接口
#labels Type-Protocol

= 简介 =

本用户验证接口利用RESTful将主站点（以下简称M）和验证站点（以下简称A）分离，以便验证站点可以更灵活的部署（比如利用info.tsinghua.edu.cn的验证站点必须要部署在清华计算中心），并允许主站点针对不同的验证群体部署多个验证站点。

= 验证接口和流程 =
 # M站点开始注册
    整个过程由M站点开始，第一步流程是在M上正常注册一个用户，填写必要的信息（如用户名、密码）。此时M上的用户已经建立起来，只是其confirmed为false，表示还没有经过验证，不能享受正常用户的服务（比如允许其它用户用同样的用户名注册从而覆盖该用户）。
 # M转至A进行验证
    M站点在获得用户的基本信息后，跳转至A验证地址，并给以username和redirect_to参数：
{{{
http://A.com/auth?username=<username>&redirect_to=<redirect_to>
}}}
    其中username为需要验证的用户名（比如学号、工作证号、姓名），redirect_to为A站点在验证成功后需要跳转回的地址。通常，这是M站点的首页。
 # A站点进行验证
    此过程由A站点自行处理，如果验证失败不需要往M回发任何数据，毕竟用户直接关浏览器就可能导致失败，我们也没有办法保证验证失败后A一定会报告M。
 # A站点进行验证成功信息提交给M
    A站点验证成功后，会提交一个POST请求到M站点，该POST请求包含以下参数：
    || username = `<username>` || 验证成功的用户名 ||
    || name =`<name>`     || 验证站点所提供的文本用户信息，比如用户的真实姓名等 ||
    || data = `<data>`     || 验证站点所提供的二进制用户信息，比如用户的照片等，这里用Base64编码 ||
    || hash = `<hash>`     || 4个字符串`<username>, <name>, <data>, <SECRET>`连接在一起后的SHA2哈希码 ||
    这里：
    * `<name>, <data>`的具体格式和包含的信息可以由A和M协定，以让A站点尽量提供一些用户的纯文本信息避免M站点让用户填写过多的资料。
    * `<hash>`的作用是用来验证A站点的身份，并验证返回的信息的有效性，放置篡改和冒充A站点发出的数据。
    * `<SECRET>`是由M和A站点协定的密钥，不能让第三方知晓，否则将无法保证验证信息的有效性
 # M站点确认验证成功
    M站点在收到A站点的验证信息后，对验证信息进行验证（通过`<SECRET>`），如果接受则将用户的confirmed设为true，写入A站点提供的用户信息，最后反馈一个字符串accepted给A站点，作为A站点调用POST request的response。
 # A站点跳回M站点
    A站点在接收到accepted后，重新跳转回redirect_to指向的地址，完成整个验证流程。
 # 补验证
    上述任何流程出了问题之后，M站点都可以让用户从新进入第2步流程再次进行验证。